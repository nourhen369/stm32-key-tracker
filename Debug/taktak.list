
taktak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a04  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc4  08003bc4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bcc  08003bcc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000010  08003be4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003be4  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7af  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d00  00000000  00000000  0002e7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  000304f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  000311f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001696f  00000000  00000000  00031e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e95c  00000000  00000000  000487c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009509a  00000000  00000000  00057123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec1bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003740  00000000  00000000  000ec210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b80 	.word	0x08003b80

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003b80 	.word	0x08003b80

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fb36 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f81c 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f952 	bl	800078c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f926 	bl	8000738 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80004ec:	f000 f880 	bl	80005f0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004f0:	f000 f8d0 	bl	8000694 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1,UART_BUFFER, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	4905      	ldr	r1, [pc, #20]	; (800050c <main+0x34>)
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <main+0x38>)
 80004fa:	f002 fb7c 	bl	8002bf6 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x3c>)
 8000500:	f000 fbda 	bl	8000cb8 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x40>)
 8000506:	f001 fea1 	bl	800224c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050a:	e7fe      	b.n	800050a <main+0x32>
 800050c:	20000100 	.word	0x20000100
 8000510:	200000bc 	.word	0x200000bc
 8000514:	2000002c 	.word	0x2000002c
 8000518:	20000074 	.word	0x20000074

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fb20 	bl	8003b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000568:	4a20      	ldr	r2, [pc, #128]	; (80005ec <SystemClock_Config+0xd0>)
 800056a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000590:	2308      	movs	r3, #8
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800059c:	2304      	movs	r3, #4
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 f9a9 	bl	80018fc <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b0:	f000 f968 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005bc:	2390      	movs	r3, #144	; 0x90
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fc0c 	bl	8001dec <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005da:	f000 f953 	bl	8000884 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_ADC1_Init+0x98>)
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <MX_ADC1_Init+0x9c>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <MX_ADC1_Init+0x98>)
 8000610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000614:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_ADC1_Init+0x98>)
 800061e:	2201      	movs	r2, #1
 8000620:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_ADC1_Init+0x98>)
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <MX_ADC1_Init+0xa0>)
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_ADC1_Init+0x98>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_ADC1_Init+0x98>)
 8000652:	f000 faed 	bl	8000c30 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 f912 	bl	8000884 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_ADC1_Init+0x98>)
 8000672:	f000 fbe3 	bl	8000e3c <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800067c:	f000 f902 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000002c 	.word	0x2000002c
 800068c:	40012000 	.word	0x40012000
 8000690:	0f000001 	.word	0x0f000001

08000694 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_TIM1_Init+0x9c>)
 80006b2:	4a20      	ldr	r2, [pc, #128]	; (8000734 <MX_TIM1_Init+0xa0>)
 80006b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_TIM1_Init+0x9c>)
 80006b8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80006bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_TIM1_Init+0x9c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_TIM1_Init+0x9c>)
 80006c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_TIM1_Init+0x9c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_TIM1_Init+0x9c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_TIM1_Init+0x9c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006de:	4814      	ldr	r0, [pc, #80]	; (8000730 <MX_TIM1_Init+0x9c>)
 80006e0:	f001 fd64 	bl	80021ac <HAL_TIM_Base_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006ea:	f000 f8cb 	bl	8000884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_TIM1_Init+0x9c>)
 80006fc:	f001 ff10 	bl	8002520 <HAL_TIM_ConfigClockSource>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000706:	f000 f8bd 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_TIM1_Init+0x9c>)
 8000718:	f002 f90c 	bl	8002934 <HAL_TIMEx_MasterConfigSynchronization>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000722:	f000 f8af 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000074 	.word	0x20000074
 8000734:	40010000 	.word	0x40010000

08000738 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_USART1_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 8000744:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 8000770:	f002 f962 	bl	8002a38 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 f883 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000bc 	.word	0x200000bc
 8000788:	40011000 	.word	0x40011000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_GPIO_Init+0x5c>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <MX_GPIO_Init+0x5c>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6313      	str	r3, [r2, #48]	; 0x30
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_GPIO_Init+0x5c>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2120      	movs	r1, #32
 80007c0:	480a      	ldr	r0, [pc, #40]	; (80007ec <MX_GPIO_Init+0x60>)
 80007c2:	f001 f881 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007c6:	2320      	movs	r3, #32
 80007c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0x60>)
 80007dc:	f000 fef0 	bl	80015c0 <HAL_GPIO_Init>

}
 80007e0:	bf00      	nop
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000

080007f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

	if( UART_BUFFER[0] == 'Y')
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <HAL_UART_RxCpltCallback+0x40>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b59      	cmp	r3, #89	; 0x59
 80007fe:	d104      	bne.n	800080a <HAL_UART_RxCpltCallback+0x1a>
	  {
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2120      	movs	r1, #32
 8000804:	480b      	ldr	r0, [pc, #44]	; (8000834 <HAL_UART_RxCpltCallback+0x44>)
 8000806:	f001 f85f 	bl	80018c8 <HAL_GPIO_WritePin>


	  }
	  if(UART_BUFFER[0] == 'N')
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_UART_RxCpltCallback+0x40>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b4e      	cmp	r3, #78	; 0x4e
 8000810:	d104      	bne.n	800081c <HAL_UART_RxCpltCallback+0x2c>
	  {
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <HAL_UART_RxCpltCallback+0x44>)
 8000818:	f001 f856 	bl	80018c8 <HAL_GPIO_WritePin>

	  }



	  HAL_UART_Receive_IT(&huart1, UART_BUFFER,1);
 800081c:	2201      	movs	r2, #1
 800081e:	4904      	ldr	r1, [pc, #16]	; (8000830 <HAL_UART_RxCpltCallback+0x40>)
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <HAL_UART_RxCpltCallback+0x48>)
 8000822:	f002 f9e8 	bl	8002bf6 <HAL_UART_Receive_IT>



}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000100 	.word	0x20000100
 8000834:	40020000 	.word	0x40020000
 8000838:	200000bc 	.word	0x200000bc

0800083c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

	adcValue = HAL_ADC_GetValue(&hadc1);
 8000844:	480b      	ldr	r0, [pc, #44]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000846:	f000 faeb 	bl	8000e20 <HAL_ADC_GetValue>
 800084a:	4603      	mov	r3, r0
 800084c:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800084e:	6013      	str	r3, [r2, #0]
	if(adcValue>300){
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000858:	d907      	bls.n	800086a <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_UART_Transmit(&huart1, TX_BUFFER,16,1000);
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800085c:	6819      	ldr	r1, [r3, #0]
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	2210      	movs	r2, #16
 8000864:	4806      	ldr	r0, [pc, #24]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000866:	f002 f934 	bl	8002ad2 <HAL_UART_Transmit>
	}
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000002c 	.word	0x2000002c
 8000878:	20000104 	.word	0x20000104
 800087c:	20000000 	.word	0x20000000
 8000880:	200000bc 	.word	0x200000bc

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <HAL_MspInit+0x4c>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x4c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <HAL_ADC_MspInit+0x7c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d127      	bne.n	8000952 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <HAL_ADC_MspInit+0x80>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a15      	ldr	r2, [pc, #84]	; (8000960 <HAL_ADC_MspInit+0x80>)
 800090c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <HAL_ADC_MspInit+0x80>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_ADC_MspInit+0x80>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_ADC_MspInit+0x80>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_ADC_MspInit+0x80>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800093a:	2301      	movs	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <HAL_ADC_MspInit+0x84>)
 800094e:	f000 fe37 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40012000 	.word	0x40012000
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000

08000968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_TIM_Base_MspInit+0x48>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d115      	bne.n	80009a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_TIM_Base_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0c      	ldr	r2, [pc, #48]	; (80009b4 <HAL_TIM_Base_MspInit+0x4c>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_TIM_Base_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2019      	movs	r0, #25
 800099c:	f000 fd47 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009a0:	2019      	movs	r0, #25
 80009a2:	f000 fd60 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40010000 	.word	0x40010000
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <HAL_UART_MspInit+0x94>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d134      	bne.n	8000a44 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_UART_MspInit+0x98>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <HAL_UART_MspInit+0x98>)
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_UART_MspInit+0x98>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_UART_MspInit+0x98>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <HAL_UART_MspInit+0x98>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_UART_MspInit+0x98>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a24:	2307      	movs	r3, #7
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4809      	ldr	r0, [pc, #36]	; (8000a54 <HAL_UART_MspInit+0x9c>)
 8000a30:	f000 fdc6 	bl	80015c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2025      	movs	r0, #37	; 0x25
 8000a3a:	f000 fcf8 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a3e:	2025      	movs	r0, #37	; 0x25
 8000a40:	f000 fd11 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40011000 	.word	0x40011000
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa4:	f000 f8a4 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ab2:	f001 fc2d 	bl	8002310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000074 	.word	0x20000074

08000ac0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <USART1_IRQHandler+0x10>)
 8000ac6:	f002 f8c7 	bl	8002c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000bc 	.word	0x200000bc

08000ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000afe:	490e      	ldr	r1, [pc, #56]	; (8000b38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b14:	4c0b      	ldr	r4, [pc, #44]	; (8000b44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b22:	f7ff ffd7 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f002 ffff 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff fcd5 	bl	80004d8 <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b3c:	08003bd4 	.word	0x08003bd4
  ldr r2, =_sbss
 8000b40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b44:	2000010c 	.word	0x2000010c

08000b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <HAL_Init+0x40>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_Init+0x40>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x40>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 fc4f 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe86 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fc67 	bl	8001482 <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 fc2f 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000004 	.word	0x20000004
 8000be8:	2000000c 	.word	0x2000000c
 8000bec:	20000008 	.word	0x20000008

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	2000000c 	.word	0x2000000c
 8000c14:	20000108 	.word	0x20000108

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000108 	.word	0x20000108

08000c30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e033      	b.n	8000cae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d109      	bne.n	8000c62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fe46 	bl	80008e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d118      	bne.n	8000ca0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c76:	f023 0302 	bic.w	r3, r3, #2
 8000c7a:	f043 0202 	orr.w	r2, r3, #2
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 f9fc 	bl	8001080 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f023 0303 	bic.w	r3, r3, #3
 8000c96:	f043 0201 	orr.w	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c9e:	e001      	b.n	8000ca4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <HAL_ADC_Start+0x1a>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e097      	b.n	8000e02 <HAL_ADC_Start+0x14a>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d018      	beq.n	8000d1a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f042 0201 	orr.w	r2, r2, #1
 8000cf6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cf8:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <HAL_ADC_Start+0x158>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a45      	ldr	r2, [pc, #276]	; (8000e14 <HAL_ADC_Start+0x15c>)
 8000cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000d02:	0c9a      	lsrs	r2, r3, #18
 8000d04:	4613      	mov	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d0c:	e002      	b.n	8000d14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f9      	bne.n	8000d0e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d15f      	bne.n	8000de8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d007      	beq.n	8000d5a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d66:	d106      	bne.n	8000d76 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	f023 0206 	bic.w	r2, r3, #6
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	645a      	str	r2, [r3, #68]	; 0x44
 8000d74:	e002      	b.n	8000d7c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <HAL_ADC_Start+0x160>)
 8000d86:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d90:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10f      	bne.n	8000dbe <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d129      	bne.n	8000e00 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	e020      	b.n	8000e00 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <HAL_ADC_Start+0x164>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d11b      	bne.n	8000e00 <HAL_ADC_Start+0x148>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d114      	bne.n	8000e00 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	e00b      	b.n	8000e00 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f043 0210 	orr.w	r2, r3, #16
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df8:	f043 0201 	orr.w	r2, r3, #1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000004 	.word	0x20000004
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	40012300 	.word	0x40012300
 8000e1c:	40012000 	.word	0x40012000

08000e20 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d101      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x1c>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e105      	b.n	8001064 <HAL_ADC_ConfigChannel+0x228>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b09      	cmp	r3, #9
 8000e66:	d925      	bls.n	8000eb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68d9      	ldr	r1, [r3, #12]
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	461a      	mov	r2, r3
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	3b1e      	subs	r3, #30
 8000e7e:	2207      	movs	r2, #7
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43da      	mvns	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68d9      	ldr	r1, [r3, #12]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4403      	add	r3, r0
 8000ea6:	3b1e      	subs	r3, #30
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	e022      	b.n	8000efa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6919      	ldr	r1, [r3, #16]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	2207      	movs	r2, #7
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6919      	ldr	r1, [r3, #16]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4403      	add	r3, r0
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d824      	bhi.n	8000f4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	3b05      	subs	r3, #5
 8000f14:	221f      	movs	r2, #31
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	400a      	ands	r2, r1
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b05      	subs	r3, #5
 8000f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	635a      	str	r2, [r3, #52]	; 0x34
 8000f4a:	e04c      	b.n	8000fe6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b0c      	cmp	r3, #12
 8000f52:	d824      	bhi.n	8000f9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	3b23      	subs	r3, #35	; 0x23
 8000f66:	221f      	movs	r2, #31
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43da      	mvns	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	400a      	ands	r2, r1
 8000f74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3b23      	subs	r3, #35	; 0x23
 8000f90:	fa00 f203 	lsl.w	r2, r0, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9c:	e023      	b.n	8000fe6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	3b41      	subs	r3, #65	; 0x41
 8000fb0:	221f      	movs	r2, #31
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b41      	subs	r3, #65	; 0x41
 8000fda:	fa00 f203 	lsl.w	r2, r0, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <HAL_ADC_ConfigChannel+0x234>)
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a21      	ldr	r2, [pc, #132]	; (8001074 <HAL_ADC_ConfigChannel+0x238>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d109      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x1cc>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b12      	cmp	r3, #18
 8000ffa:	d105      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_ADC_ConfigChannel+0x238>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d123      	bne.n	800105a <HAL_ADC_ConfigChannel+0x21e>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b10      	cmp	r3, #16
 8001018:	d003      	beq.n	8001022 <HAL_ADC_ConfigChannel+0x1e6>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b11      	cmp	r3, #17
 8001020:	d11b      	bne.n	800105a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b10      	cmp	r3, #16
 8001034:	d111      	bne.n	800105a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_ADC_ConfigChannel+0x23c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_ADC_ConfigChannel+0x240>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	0c9a      	lsrs	r2, r3, #18
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800104c:	e002      	b.n	8001054 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	3b01      	subs	r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f9      	bne.n	800104e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40012300 	.word	0x40012300
 8001074:	40012000 	.word	0x40012000
 8001078:	20000004 	.word	0x20000004
 800107c:	431bde83 	.word	0x431bde83

08001080 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001088:	4b79      	ldr	r3, [pc, #484]	; (8001270 <ADC_Init+0x1f0>)
 800108a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	431a      	orrs	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6859      	ldr	r1, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	021a      	lsls	r2, r3, #8
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80010d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6859      	ldr	r1, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6899      	ldr	r1, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	4a58      	ldr	r2, [pc, #352]	; (8001274 <ADC_Init+0x1f4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d022      	beq.n	800115e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001126:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6899      	ldr	r1, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001148:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6899      	ldr	r1, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	e00f      	b.n	800117e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800116c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800117c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0202 	bic.w	r2, r2, #2
 800118c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6899      	ldr	r1, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e1b      	ldrb	r3, [r3, #24]
 8001198:	005a      	lsls	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d01b      	beq.n	80011e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80011ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6859      	ldr	r1, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	3b01      	subs	r3, #1
 80011d8:	035a      	lsls	r2, r3, #13
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	e007      	b.n	80011f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	3b01      	subs	r3, #1
 8001210:	051a      	lsls	r2, r3, #20
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001228:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6899      	ldr	r1, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001236:	025a      	lsls	r2, r3, #9
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800124e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6899      	ldr	r1, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	029a      	lsls	r2, r3, #10
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	609a      	str	r2, [r3, #8]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	40012300 	.word	0x40012300
 8001274:	0f000001 	.word	0x0f000001

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4907      	ldr	r1, [pc, #28]	; (8001314 <__NVIC_EnableIRQ+0x38>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e100 	.word	0xe000e100

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	; (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	; (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
         );
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ff8e 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff29 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001440:	f7ff ff3e 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f7ff ff8e 	bl	800136c <NVIC_EncodePriority>
 8001450:	4602      	mov	r2, r0
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff5d 	bl	8001318 <__NVIC_SetPriority>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff31 	bl	80012dc <__NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffa2 	bl	80013d4 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff fbb6 	bl	8000c18 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d008      	beq.n	80014cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e052      	b.n	8001572 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0216 	bic.w	r2, r2, #22
 80014da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d103      	bne.n	80014fc <HAL_DMA_Abort+0x62>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d007      	beq.n	800150c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0208 	bic.w	r2, r2, #8
 800150a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800151c:	e013      	b.n	8001546 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800151e:	f7ff fb7b 	bl	8000c18 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b05      	cmp	r3, #5
 800152a:	d90c      	bls.n	8001546 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2220      	movs	r2, #32
 8001530:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2203      	movs	r2, #3
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e015      	b.n	8001572 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e4      	bne.n	800151e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001558:	223f      	movs	r2, #63	; 0x3f
 800155a:	409a      	lsls	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d004      	beq.n	8001598 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e00c      	b.n	80015b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2205      	movs	r2, #5
 800159c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	e159      	b.n	8001890 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8148 	bne.w	800188a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d005      	beq.n	8001612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160e:	2b02      	cmp	r3, #2
 8001610:	d130      	bne.n	8001674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 0201 	and.w	r2, r3, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b03      	cmp	r3, #3
 800167e:	d017      	beq.n	80016b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d123      	bne.n	8001704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80a2 	beq.w	800188a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b57      	ldr	r3, [pc, #348]	; (80018a8 <HAL_GPIO_Init+0x2e8>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a56      	ldr	r2, [pc, #344]	; (80018a8 <HAL_GPIO_Init+0x2e8>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b54      	ldr	r3, [pc, #336]	; (80018a8 <HAL_GPIO_Init+0x2e8>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001762:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_GPIO_Init+0x2ec>)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a49      	ldr	r2, [pc, #292]	; (80018b0 <HAL_GPIO_Init+0x2f0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d019      	beq.n	80017c2 <HAL_GPIO_Init+0x202>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a48      	ldr	r2, [pc, #288]	; (80018b4 <HAL_GPIO_Init+0x2f4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d013      	beq.n	80017be <HAL_GPIO_Init+0x1fe>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a47      	ldr	r2, [pc, #284]	; (80018b8 <HAL_GPIO_Init+0x2f8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00d      	beq.n	80017ba <HAL_GPIO_Init+0x1fa>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a46      	ldr	r2, [pc, #280]	; (80018bc <HAL_GPIO_Init+0x2fc>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d007      	beq.n	80017b6 <HAL_GPIO_Init+0x1f6>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a45      	ldr	r2, [pc, #276]	; (80018c0 <HAL_GPIO_Init+0x300>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_GPIO_Init+0x1f2>
 80017ae:	2304      	movs	r3, #4
 80017b0:	e008      	b.n	80017c4 <HAL_GPIO_Init+0x204>
 80017b2:	2307      	movs	r3, #7
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x204>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e004      	b.n	80017c4 <HAL_GPIO_Init+0x204>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_Init+0x204>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_GPIO_Init+0x204>
 80017c2:	2300      	movs	r3, #0
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f002 0203 	and.w	r2, r2, #3
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	4093      	lsls	r3, r2
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d4:	4935      	ldr	r1, [pc, #212]	; (80018ac <HAL_GPIO_Init+0x2ec>)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e2:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <HAL_GPIO_Init+0x304>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001806:	4a2f      	ldr	r2, [pc, #188]	; (80018c4 <HAL_GPIO_Init+0x304>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800180c:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_GPIO_Init+0x304>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001830:	4a24      	ldr	r2, [pc, #144]	; (80018c4 <HAL_GPIO_Init+0x304>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001836:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <HAL_GPIO_Init+0x304>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800185a:	4a1a      	ldr	r2, [pc, #104]	; (80018c4 <HAL_GPIO_Init+0x304>)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_GPIO_Init+0x304>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001884:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <HAL_GPIO_Init+0x304>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3301      	adds	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b0f      	cmp	r3, #15
 8001894:	f67f aea2 	bls.w	80015dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40013800 	.word	0x40013800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40013c00 	.word	0x40013c00

080018c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	619a      	str	r2, [r3, #24]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e267      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d075      	beq.n	8001a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800191a:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b04      	cmp	r3, #4
 8001924:	d00c      	beq.n	8001940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001926:	4b85      	ldr	r3, [pc, #532]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800192e:	2b08      	cmp	r3, #8
 8001930:	d112      	bne.n	8001958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001932:	4b82      	ldr	r3, [pc, #520]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800193e:	d10b      	bne.n	8001958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	4b7e      	ldr	r3, [pc, #504]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d05b      	beq.n	8001a04 <HAL_RCC_OscConfig+0x108>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d157      	bne.n	8001a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e242      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d106      	bne.n	8001970 <HAL_RCC_OscConfig+0x74>
 8001962:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a75      	ldr	r2, [pc, #468]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e01d      	b.n	80019ac <HAL_RCC_OscConfig+0xb0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x98>
 800197a:	4b70      	ldr	r3, [pc, #448]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a6f      	ldr	r2, [pc, #444]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b6d      	ldr	r3, [pc, #436]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6c      	ldr	r2, [pc, #432]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 800198c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0xb0>
 8001994:	4b69      	ldr	r3, [pc, #420]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a68      	ldr	r2, [pc, #416]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 800199a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a65      	ldr	r2, [pc, #404]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 80019a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d013      	beq.n	80019dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff f930 	bl	8000c18 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff f92c 	bl	8000c18 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e207      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4b5b      	ldr	r3, [pc, #364]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0xc0>
 80019da:	e014      	b.n	8001a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff f91c 	bl	8000c18 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff f918 	bl	8000c18 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e1f3      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0xe8>
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d063      	beq.n	8001ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a12:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d11c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2a:	4b44      	ldr	r3, [pc, #272]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d116      	bne.n	8001a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_RCC_OscConfig+0x152>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e1c7      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4937      	ldr	r1, [pc, #220]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	e03a      	b.n	8001ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d020      	beq.n	8001aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <HAL_RCC_OscConfig+0x244>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff f8d1 	bl	8000c18 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f8cd 	bl	8000c18 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1a8      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4925      	ldr	r1, [pc, #148]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_RCC_OscConfig+0x244>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f8b0 	bl	8000c18 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff f8ac 	bl	8000c18 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e187      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d036      	beq.n	8001b54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d016      	beq.n	8001b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_RCC_OscConfig+0x248>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff f890 	bl	8000c18 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff f88c 	bl	8000c18 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e167      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_OscConfig+0x240>)
 8001b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x200>
 8001b1a:	e01b      	b.n	8001b54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_OscConfig+0x248>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b22:	f7ff f879 	bl	8000c18 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b28:	e00e      	b.n	8001b48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2a:	f7ff f875 	bl	8000c18 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d907      	bls.n	8001b48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e150      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	42470000 	.word	0x42470000
 8001b44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	4b88      	ldr	r3, [pc, #544]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1ea      	bne.n	8001b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8097 	beq.w	8001c90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b66:	4b81      	ldr	r3, [pc, #516]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10f      	bne.n	8001b92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	4b7d      	ldr	r3, [pc, #500]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a7c      	ldr	r2, [pc, #496]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b7a      	ldr	r3, [pc, #488]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b92:	4b77      	ldr	r3, [pc, #476]	; (8001d70 <HAL_RCC_OscConfig+0x474>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d118      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9e:	4b74      	ldr	r3, [pc, #464]	; (8001d70 <HAL_RCC_OscConfig+0x474>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a73      	ldr	r2, [pc, #460]	; (8001d70 <HAL_RCC_OscConfig+0x474>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001baa:	f7ff f835 	bl	8000c18 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb2:	f7ff f831 	bl	8000c18 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e10c      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	4b6a      	ldr	r3, [pc, #424]	; (8001d70 <HAL_RCC_OscConfig+0x474>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x2ea>
 8001bd8:	4b64      	ldr	r3, [pc, #400]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	4a63      	ldr	r2, [pc, #396]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6713      	str	r3, [r2, #112]	; 0x70
 8001be4:	e01c      	b.n	8001c20 <HAL_RCC_OscConfig+0x324>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x30c>
 8001bee:	4b5f      	ldr	r3, [pc, #380]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	4a5e      	ldr	r2, [pc, #376]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfa:	4b5c      	ldr	r3, [pc, #368]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	4a5b      	ldr	r2, [pc, #364]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6713      	str	r3, [r2, #112]	; 0x70
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0x324>
 8001c08:	4b58      	ldr	r3, [pc, #352]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	4a57      	ldr	r2, [pc, #348]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	6713      	str	r3, [r2, #112]	; 0x70
 8001c14:	4b55      	ldr	r3, [pc, #340]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	4a54      	ldr	r2, [pc, #336]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001c1a:	f023 0304 	bic.w	r3, r3, #4
 8001c1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d015      	beq.n	8001c54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7fe fff6 	bl	8000c18 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c30:	f7fe fff2 	bl	8000c18 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0cb      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0ee      	beq.n	8001c30 <HAL_RCC_OscConfig+0x334>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c54:	f7fe ffe0 	bl	8000c18 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7fe ffdc 	bl	8000c18 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0b5      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c72:	4b3e      	ldr	r3, [pc, #248]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ee      	bne.n	8001c5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c84:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4a38      	ldr	r2, [pc, #224]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80a1 	beq.w	8001ddc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c9a:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d05c      	beq.n	8001d60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d141      	bne.n	8001d32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_RCC_OscConfig+0x478>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7fe ffb0 	bl	8000c18 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7fe ffac 	bl	8000c18 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e087      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	491b      	ldr	r1, [pc, #108]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x478>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7fe ff85 	bl	8000c18 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d12:	f7fe ff81 	bl	8000c18 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e05c      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x416>
 8001d30:	e054      	b.n	8001ddc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_RCC_OscConfig+0x478>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7fe ff6e 	bl	8000c18 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7fe ff6a 	bl	8000c18 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e045      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_OscConfig+0x470>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x444>
 8001d5e:	e03d      	b.n	8001ddc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e038      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40007000 	.word	0x40007000
 8001d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_RCC_OscConfig+0x4ec>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d028      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d121      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d11a      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001da8:	4013      	ands	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d111      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	085b      	lsrs	r3, r3, #1
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0cc      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b68      	ldr	r3, [pc, #416]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d90c      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b65      	ldr	r3, [pc, #404]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0b8      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a52      	ldr	r2, [pc, #328]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	494d      	ldr	r1, [pc, #308]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d044      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d119      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e07f      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d003      	beq.n	8001eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eaa:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e06f      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e067      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eca:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f023 0203 	bic.w	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4934      	ldr	r1, [pc, #208]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001edc:	f7fe fe9c 	bl	8000c18 <HAL_GetTick>
 8001ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee4:	f7fe fe98 	bl	8000c18 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e04f      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 020c 	and.w	r2, r3, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d1eb      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d20c      	bcs.n	8001f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e032      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f72:	f000 f821 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8001f76:	4602      	mov	r2, r0
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	490a      	ldr	r1, [pc, #40]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	5ccb      	ldrb	r3, [r1, r3]
 8001f86:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8a:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fdfc 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023c00 	.word	0x40023c00
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	08003bac 	.word	0x08003bac
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	20000008 	.word	0x20000008

08001fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fbc:	b090      	sub	sp, #64	; 0x40
 8001fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fc8:	2300      	movs	r3, #0
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d00d      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	f200 80a1 	bhi.w	8002124 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x34>
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d003      	beq.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fea:	e09b      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fec:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_GetSysClockFreq+0x184>)
 8001fee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ff0:	e09b      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ff2:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ff6:	e098      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff8:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002002:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_RCC_GetSysClockFreq+0x180>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d028      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200e:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <HAL_RCC_GetSysClockFreq+0x180>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	099b      	lsrs	r3, r3, #6
 8002014:	2200      	movs	r2, #0
 8002016:	623b      	str	r3, [r7, #32]
 8002018:	627a      	str	r2, [r7, #36]	; 0x24
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002020:	2100      	movs	r1, #0
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_GetSysClockFreq+0x188>)
 8002024:	fb03 f201 	mul.w	r2, r3, r1
 8002028:	2300      	movs	r3, #0
 800202a:	fb00 f303 	mul.w	r3, r0, r3
 800202e:	4413      	add	r3, r2
 8002030:	4a43      	ldr	r2, [pc, #268]	; (8002140 <HAL_RCC_GetSysClockFreq+0x188>)
 8002032:	fba0 1202 	umull	r1, r2, r0, r2
 8002036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002038:	460a      	mov	r2, r1
 800203a:	62ba      	str	r2, [r7, #40]	; 0x28
 800203c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800203e:	4413      	add	r3, r2
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002044:	2200      	movs	r2, #0
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	61fa      	str	r2, [r7, #28]
 800204a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002052:	f7fe f8bf 	bl	80001d4 <__aeabi_uldivmod>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4613      	mov	r3, r2
 800205c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800205e:	e053      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002060:	4b35      	ldr	r3, [pc, #212]	; (8002138 <HAL_RCC_GetSysClockFreq+0x180>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	099b      	lsrs	r3, r3, #6
 8002066:	2200      	movs	r2, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	617a      	str	r2, [r7, #20]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002072:	f04f 0b00 	mov.w	fp, #0
 8002076:	4652      	mov	r2, sl
 8002078:	465b      	mov	r3, fp
 800207a:	f04f 0000 	mov.w	r0, #0
 800207e:	f04f 0100 	mov.w	r1, #0
 8002082:	0159      	lsls	r1, r3, #5
 8002084:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002088:	0150      	lsls	r0, r2, #5
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	ebb2 080a 	subs.w	r8, r2, sl
 8002092:	eb63 090b 	sbc.w	r9, r3, fp
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020aa:	ebb2 0408 	subs.w	r4, r2, r8
 80020ae:	eb63 0509 	sbc.w	r5, r3, r9
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	00eb      	lsls	r3, r5, #3
 80020bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020c0:	00e2      	lsls	r2, r4, #3
 80020c2:	4614      	mov	r4, r2
 80020c4:	461d      	mov	r5, r3
 80020c6:	eb14 030a 	adds.w	r3, r4, sl
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	eb45 030b 	adc.w	r3, r5, fp
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020de:	4629      	mov	r1, r5
 80020e0:	028b      	lsls	r3, r1, #10
 80020e2:	4621      	mov	r1, r4
 80020e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020e8:	4621      	mov	r1, r4
 80020ea:	028a      	lsls	r2, r1, #10
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f2:	2200      	movs	r2, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	60fa      	str	r2, [r7, #12]
 80020f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fc:	f7fe f86a 	bl	80001d4 <__aeabi_uldivmod>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4613      	mov	r3, r2
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_GetSysClockFreq+0x180>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	3301      	adds	r3, #1
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002120:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002122:	e002      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_RCC_GetSysClockFreq+0x184>)
 8002126:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800212c:	4618      	mov	r0, r3
 800212e:	3740      	adds	r7, #64	; 0x40
 8002130:	46bd      	mov	sp, r7
 8002132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	00f42400 	.word	0x00f42400
 8002140:	017d7840 	.word	0x017d7840

08002144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_RCC_GetHCLKFreq+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000004 	.word	0x20000004

0800215c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002160:	f7ff fff0 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 8002164:	4602      	mov	r2, r0
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	0a9b      	lsrs	r3, r3, #10
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	4903      	ldr	r1, [pc, #12]	; (8002180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002172:	5ccb      	ldrb	r3, [r1, r3]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40023800 	.word	0x40023800
 8002180:	08003bbc 	.word	0x08003bbc

08002184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002188:	f7ff ffdc 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0b5b      	lsrs	r3, r3, #13
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4903      	ldr	r1, [pc, #12]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	08003bbc 	.word	0x08003bbc

080021ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e041      	b.n	8002242 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fbc8 	bl	8000968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f000 fa88 	bl	8002700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d001      	beq.n	8002264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e044      	b.n	80022ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1e      	ldr	r2, [pc, #120]	; (80022fc <HAL_TIM_Base_Start_IT+0xb0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d018      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x6c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228e:	d013      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x6c>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_TIM_Base_Start_IT+0xb4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00e      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x6c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a19      	ldr	r2, [pc, #100]	; (8002304 <HAL_TIM_Base_Start_IT+0xb8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d009      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x6c>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_TIM_Base_Start_IT+0xbc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d004      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x6c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a16      	ldr	r2, [pc, #88]	; (800230c <HAL_TIM_Base_Start_IT+0xc0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d111      	bne.n	80022dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d010      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022da:	e007      	b.n	80022ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40010000 	.word	0x40010000
 8002300:	40000400 	.word	0x40000400
 8002304:	40000800 	.word	0x40000800
 8002308:	40000c00 	.word	0x40000c00
 800230c:	40014000 	.word	0x40014000

08002310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b02      	cmp	r3, #2
 8002324:	d122      	bne.n	800236c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d11b      	bne.n	800236c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0202 	mvn.w	r2, #2
 800233c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f9b5 	bl	80026c2 <HAL_TIM_IC_CaptureCallback>
 8002358:	e005      	b.n	8002366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f9a7 	bl	80026ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f9b8 	bl	80026d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b04      	cmp	r3, #4
 8002378:	d122      	bne.n	80023c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b04      	cmp	r3, #4
 8002386:	d11b      	bne.n	80023c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0204 	mvn.w	r2, #4
 8002390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2202      	movs	r2, #2
 8002396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f98b 	bl	80026c2 <HAL_TIM_IC_CaptureCallback>
 80023ac:	e005      	b.n	80023ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f97d 	bl	80026ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f98e 	bl	80026d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d122      	bne.n	8002414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d11b      	bne.n	8002414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0208 	mvn.w	r2, #8
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2204      	movs	r2, #4
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f961 	bl	80026c2 <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f953 	bl	80026ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f964 	bl	80026d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b10      	cmp	r3, #16
 8002420:	d122      	bne.n	8002468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b10      	cmp	r3, #16
 800242e:	d11b      	bne.n	8002468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0210 	mvn.w	r2, #16
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2208      	movs	r2, #8
 800243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f937 	bl	80026c2 <HAL_TIM_IC_CaptureCallback>
 8002454:	e005      	b.n	8002462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f929 	bl	80026ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f93a 	bl	80026d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	d10e      	bne.n	8002494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d107      	bne.n	8002494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0201 	mvn.w	r2, #1
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe f9d4 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249e:	2b80      	cmp	r3, #128	; 0x80
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ac:	2b80      	cmp	r3, #128	; 0x80
 80024ae:	d107      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fab2 	bl	8002a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ca:	2b40      	cmp	r3, #64	; 0x40
 80024cc:	d10e      	bne.n	80024ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d107      	bne.n	80024ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8ff 	bl	80026ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d10e      	bne.n	8002518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b20      	cmp	r3, #32
 8002506:	d107      	bne.n	8002518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0220 	mvn.w	r2, #32
 8002510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fa7c 	bl	8002a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_TIM_ConfigClockSource+0x1c>
 8002538:	2302      	movs	r3, #2
 800253a:	e0b4      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x186>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800255a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002574:	d03e      	beq.n	80025f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257a:	f200 8087 	bhi.w	800268c <HAL_TIM_ConfigClockSource+0x16c>
 800257e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002582:	f000 8086 	beq.w	8002692 <HAL_TIM_ConfigClockSource+0x172>
 8002586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258a:	d87f      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 800258c:	2b70      	cmp	r3, #112	; 0x70
 800258e:	d01a      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002590:	2b70      	cmp	r3, #112	; 0x70
 8002592:	d87b      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 8002594:	2b60      	cmp	r3, #96	; 0x60
 8002596:	d050      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x11a>
 8002598:	2b60      	cmp	r3, #96	; 0x60
 800259a:	d877      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 800259c:	2b50      	cmp	r3, #80	; 0x50
 800259e:	d03c      	beq.n	800261a <HAL_TIM_ConfigClockSource+0xfa>
 80025a0:	2b50      	cmp	r3, #80	; 0x50
 80025a2:	d873      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d058      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x13a>
 80025a8:	2b40      	cmp	r3, #64	; 0x40
 80025aa:	d86f      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 80025ac:	2b30      	cmp	r3, #48	; 0x30
 80025ae:	d064      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x15a>
 80025b0:	2b30      	cmp	r3, #48	; 0x30
 80025b2:	d86b      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d060      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x15a>
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d867      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d05c      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x15a>
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d05a      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x15a>
 80025c4:	e062      	b.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f000 f98d 	bl	80028f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	609a      	str	r2, [r3, #8]
      break;
 80025f2:	e04f      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f000 f976 	bl	80028f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002616:	609a      	str	r2, [r3, #8]
      break;
 8002618:	e03c      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	461a      	mov	r2, r3
 8002628:	f000 f8ea 	bl	8002800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2150      	movs	r1, #80	; 0x50
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f943 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 8002638:	e02c      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	461a      	mov	r2, r3
 8002648:	f000 f909 	bl	800285e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2160      	movs	r1, #96	; 0x60
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f933 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 8002658:	e01c      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	461a      	mov	r2, r3
 8002668:	f000 f8ca 	bl	8002800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2140      	movs	r1, #64	; 0x40
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f923 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 8002678:	e00c      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f000 f91a 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 800268a:	e003      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      break;
 8002690:	e000      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a34      	ldr	r2, [pc, #208]	; (80027e4 <TIM_Base_SetConfig+0xe4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00f      	beq.n	8002738 <TIM_Base_SetConfig+0x38>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271e:	d00b      	beq.n	8002738 <TIM_Base_SetConfig+0x38>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a31      	ldr	r2, [pc, #196]	; (80027e8 <TIM_Base_SetConfig+0xe8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <TIM_Base_SetConfig+0x38>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a30      	ldr	r2, [pc, #192]	; (80027ec <TIM_Base_SetConfig+0xec>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d003      	beq.n	8002738 <TIM_Base_SetConfig+0x38>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a2f      	ldr	r2, [pc, #188]	; (80027f0 <TIM_Base_SetConfig+0xf0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d108      	bne.n	800274a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <TIM_Base_SetConfig+0xe4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01b      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d017      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <TIM_Base_SetConfig+0xe8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a21      	ldr	r2, [pc, #132]	; (80027ec <TIM_Base_SetConfig+0xec>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00f      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a20      	ldr	r2, [pc, #128]	; (80027f0 <TIM_Base_SetConfig+0xf0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00b      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <TIM_Base_SetConfig+0xf4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <TIM_Base_SetConfig+0xf8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <TIM_Base_SetConfig+0xfc>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d108      	bne.n	800279c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <TIM_Base_SetConfig+0xe4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d103      	bne.n	80027d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	615a      	str	r2, [r3, #20]
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40010000 	.word	0x40010000
 80027e8:	40000400 	.word	0x40000400
 80027ec:	40000800 	.word	0x40000800
 80027f0:	40000c00 	.word	0x40000c00
 80027f4:	40014000 	.word	0x40014000
 80027f8:	40014400 	.word	0x40014400
 80027fc:	40014800 	.word	0x40014800

08002800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f023 0201 	bic.w	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f023 030a 	bic.w	r3, r3, #10
 800283c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	621a      	str	r2, [r3, #32]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800285e:	b480      	push	{r7}
 8002860:	b087      	sub	sp, #28
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0210 	bic.w	r2, r3, #16
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002888:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	031b      	lsls	r3, r3, #12
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800289a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	f043 0307 	orr.w	r3, r3, #7
 80028e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800290e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	431a      	orrs	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002948:	2302      	movs	r3, #2
 800294a:	e050      	b.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1c      	ldr	r2, [pc, #112]	; (80029fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d018      	beq.n	80029c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002998:	d013      	beq.n	80029c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00e      	beq.n	80029c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d009      	beq.n	80029c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d004      	beq.n	80029c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a13      	ldr	r2, [pc, #76]	; (8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10c      	bne.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40010000 	.word	0x40010000
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800
 8002a08:	40000c00 	.word	0x40000c00
 8002a0c:	40014000 	.word	0x40014000

08002a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e03f      	b.n	8002aca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fd ffaa 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2224      	movs	r2, #36	; 0x24
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fddf 	bl	8003640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b08a      	sub	sp, #40	; 0x28
 8002ad6:	af02      	add	r7, sp, #8
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d17c      	bne.n	8002bec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_UART_Transmit+0x2c>
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e075      	b.n	8002bee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_UART_Transmit+0x3e>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e06e      	b.n	8002bee <HAL_UART_Transmit+0x11c>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2221      	movs	r2, #33	; 0x21
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b26:	f7fe f877 	bl	8000c18 <HAL_GetTick>
 8002b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	88fa      	ldrh	r2, [r7, #6]
 8002b30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	88fa      	ldrh	r2, [r7, #6]
 8002b36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b40:	d108      	bne.n	8002b54 <HAL_UART_Transmit+0x82>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d104      	bne.n	8002b54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	e003      	b.n	8002b5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b64:	e02a      	b.n	8002bbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2180      	movs	r1, #128	; 0x80
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fb1f 	bl	80031b4 <UART_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e036      	b.n	8002bee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10b      	bne.n	8002b9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	3302      	adds	r3, #2
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	e007      	b.n	8002bae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	781a      	ldrb	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	3301      	adds	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1cf      	bne.n	8002b66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2140      	movs	r1, #64	; 0x40
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 faef 	bl	80031b4 <UART_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e006      	b.n	8002bee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e000      	b.n	8002bee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
  }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3720      	adds	r7, #32
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	4613      	mov	r3, r2
 8002c02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d11d      	bne.n	8002c4c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_UART_Receive_IT+0x26>
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e016      	b.n	8002c4e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Receive_IT+0x38>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e00f      	b.n	8002c4e <HAL_UART_Receive_IT+0x58>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fb24 	bl	8003290 <UART_Start_Receive_IT>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	e000      	b.n	8002c4e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b0ba      	sub	sp, #232	; 0xe8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_UART_IRQHandler+0x66>
 8002caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fc07 	bl	80034ca <UART_Receive_IT>
      return;
 8002cbc:	e256      	b.n	800316c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80de 	beq.w	8002e84 <HAL_UART_IRQHandler+0x22c>
 8002cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d106      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80d1 	beq.w	8002e84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_UART_IRQHandler+0xae>
 8002cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f043 0201 	orr.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_UART_IRQHandler+0xd2>
 8002d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0202 	orr.w	r2, r3, #2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_UART_IRQHandler+0xf6>
 8002d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f043 0204 	orr.w	r2, r3, #4
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d011      	beq.n	8002d7e <HAL_UART_IRQHandler+0x126>
 8002d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f043 0208 	orr.w	r2, r3, #8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 81ed 	beq.w	8003162 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_UART_IRQHandler+0x14e>
 8002d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fb92 	bl	80034ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b40      	cmp	r3, #64	; 0x40
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d103      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x17a>
 8002dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d04f      	beq.n	8002e72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fa9a 	bl	800330c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d141      	bne.n	8002e6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3314      	adds	r3, #20
 8002dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002df4:	e853 3f00 	ldrex	r3, [r3]
 8002df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1d9      	bne.n	8002de6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d013      	beq.n	8002e62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	4a7d      	ldr	r2, [pc, #500]	; (8003034 <HAL_UART_IRQHandler+0x3dc>)
 8002e40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fb97 	bl	800157a <HAL_DMA_Abort_IT>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e60:	e00e      	b.n	8002e80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f990 	bl	8003188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e68:	e00a      	b.n	8002e80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f98c 	bl	8003188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e70:	e006      	b.n	8002e80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f988 	bl	8003188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e7e:	e170      	b.n	8003162 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e80:	bf00      	nop
    return;
 8002e82:	e16e      	b.n	8003162 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	f040 814a 	bne.w	8003122 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8143 	beq.w	8003122 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 813c 	beq.w	8003122 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b40      	cmp	r3, #64	; 0x40
 8002ecc:	f040 80b4 	bne.w	8003038 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002edc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8140 	beq.w	8003166 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	f080 8139 	bcs.w	8003166 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002efa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f06:	f000 8088 	beq.w	800301a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	330c      	adds	r3, #12
 8002f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f18:	e853 3f00 	ldrex	r3, [r3]
 8002f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	330c      	adds	r3, #12
 8002f32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f46:	e841 2300 	strex	r3, r2, [r1]
 8002f4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1d9      	bne.n	8002f0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3314      	adds	r3, #20
 8002f76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e1      	bne.n	8002f56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3314      	adds	r3, #20
 8002f98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3314      	adds	r3, #20
 8002fb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e3      	bne.n	8002f92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	330c      	adds	r3, #12
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fea:	f023 0310 	bic.w	r3, r3, #16
 8002fee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	330c      	adds	r3, #12
 8002ff8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ffc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ffe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003000:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003002:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003004:	e841 2300 	strex	r3, r2, [r1]
 8003008:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800300a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1e3      	bne.n	8002fd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fa40 	bl	800149a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003022:	b29b      	uxth	r3, r3
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	b29b      	uxth	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8b6 	bl	800319c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003030:	e099      	b.n	8003166 <HAL_UART_IRQHandler+0x50e>
 8003032:	bf00      	nop
 8003034:	080033d3 	.word	0x080033d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003040:	b29b      	uxth	r3, r3
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 808b 	beq.w	800316a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8086 	beq.w	800316a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	330c      	adds	r3, #12
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800306e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003070:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	330c      	adds	r3, #12
 800307e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003082:	647a      	str	r2, [r7, #68]	; 0x44
 8003084:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e3      	bne.n	800305e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3314      	adds	r3, #20
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	623b      	str	r3, [r7, #32]
   return(result);
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3314      	adds	r3, #20
 80030b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030ba:	633a      	str	r2, [r7, #48]	; 0x30
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1e3      	bne.n	8003096 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0310 	bic.w	r3, r3, #16
 80030f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	330c      	adds	r3, #12
 80030fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003100:	61fa      	str	r2, [r7, #28]
 8003102:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003104:	69b9      	ldr	r1, [r7, #24]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	617b      	str	r3, [r7, #20]
   return(result);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e3      	bne.n	80030dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003118:	4619      	mov	r1, r3
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f83e 	bl	800319c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003120:	e023      	b.n	800316a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_UART_IRQHandler+0x4ea>
 800312e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f95d 	bl	80033fa <UART_Transmit_IT>
    return;
 8003140:	e014      	b.n	800316c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00e      	beq.n	800316c <HAL_UART_IRQHandler+0x514>
 800314e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f99d 	bl	800349a <UART_EndTransmit_IT>
    return;
 8003160:	e004      	b.n	800316c <HAL_UART_IRQHandler+0x514>
    return;
 8003162:	bf00      	nop
 8003164:	e002      	b.n	800316c <HAL_UART_IRQHandler+0x514>
      return;
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <HAL_UART_IRQHandler+0x514>
      return;
 800316a:	bf00      	nop
  }
}
 800316c:	37e8      	adds	r7, #232	; 0xe8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop

08003174 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b090      	sub	sp, #64	; 0x40
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c4:	e050      	b.n	8003268 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d04c      	beq.n	8003268 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80031d4:	f7fd fd20 	bl	8000c18 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d241      	bcs.n	8003268 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	330c      	adds	r3, #12
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	e853 3f00 	ldrex	r3, [r3]
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	330c      	adds	r3, #12
 8003202:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003204:	637a      	str	r2, [r7, #52]	; 0x34
 8003206:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003208:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800320a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800320c:	e841 2300 	strex	r3, r2, [r1]
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e5      	bne.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3314      	adds	r3, #20
 800321e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	613b      	str	r3, [r7, #16]
   return(result);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3314      	adds	r3, #20
 8003236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003238:	623a      	str	r2, [r7, #32]
 800323a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	69f9      	ldr	r1, [r7, #28]
 800323e:	6a3a      	ldr	r2, [r7, #32]
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	61bb      	str	r3, [r7, #24]
   return(result);
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e5      	bne.n	8003218 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e00f      	b.n	8003288 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4013      	ands	r3, r2
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	429a      	cmp	r2, r3
 8003276:	bf0c      	ite	eq
 8003278:	2301      	moveq	r3, #1
 800327a:	2300      	movne	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	429a      	cmp	r2, r3
 8003284:	d09f      	beq.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3740      	adds	r7, #64	; 0x40
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	88fa      	ldrh	r2, [r7, #6]
 80032a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	88fa      	ldrh	r2, [r7, #6]
 80032ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2222      	movs	r2, #34	; 0x22
 80032ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0220 	orr.w	r2, r2, #32
 80032fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800330c:	b480      	push	{r7}
 800330e:	b095      	sub	sp, #84	; 0x54
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	330c      	adds	r3, #12
 800331a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331e:	e853 3f00 	ldrex	r3, [r3]
 8003322:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	330c      	adds	r3, #12
 8003332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003334:	643a      	str	r2, [r7, #64]	; 0x40
 8003336:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800333a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800333c:	e841 2300 	strex	r3, r2, [r1]
 8003340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e5      	bne.n	8003314 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3314      	adds	r3, #20
 800334e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	e853 3f00 	ldrex	r3, [r3]
 8003356:	61fb      	str	r3, [r7, #28]
   return(result);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3314      	adds	r3, #20
 8003366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003368:	62fa      	str	r2, [r7, #44]	; 0x2c
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800336e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003370:	e841 2300 	strex	r3, r2, [r1]
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e5      	bne.n	8003348 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	2b01      	cmp	r3, #1
 8003382:	d119      	bne.n	80033b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	330c      	adds	r3, #12
 800338a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	e853 3f00 	ldrex	r3, [r3]
 8003392:	60bb      	str	r3, [r7, #8]
   return(result);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f023 0310 	bic.w	r3, r3, #16
 800339a:	647b      	str	r3, [r7, #68]	; 0x44
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033a4:	61ba      	str	r2, [r7, #24]
 80033a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	6979      	ldr	r1, [r7, #20]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	613b      	str	r3, [r7, #16]
   return(result);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e5      	bne.n	8003384 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033c6:	bf00      	nop
 80033c8:	3754      	adds	r7, #84	; 0x54
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff fecb 	bl	8003188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b21      	cmp	r3, #33	; 0x21
 800340c:	d13e      	bne.n	800348c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003416:	d114      	bne.n	8003442 <UART_Transmit_IT+0x48>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d110      	bne.n	8003442 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003434:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	1c9a      	adds	r2, r3, #2
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	621a      	str	r2, [r3, #32]
 8003440:	e008      	b.n	8003454 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	1c59      	adds	r1, r3, #1
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6211      	str	r1, [r2, #32]
 800344c:	781a      	ldrb	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29b      	uxth	r3, r3
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4619      	mov	r1, r3
 8003462:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10f      	bne.n	8003488 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003476:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003486:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800348c:	2302      	movs	r3, #2
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff fe5a 	bl	8003174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b08c      	sub	sp, #48	; 0x30
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b22      	cmp	r3, #34	; 0x22
 80034dc:	f040 80ab 	bne.w	8003636 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e8:	d117      	bne.n	800351a <UART_Receive_IT+0x50>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d113      	bne.n	800351a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003508:	b29a      	uxth	r2, r3
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	1c9a      	adds	r2, r3, #2
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
 8003518:	e026      	b.n	8003568 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003520:	2300      	movs	r3, #0
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352c:	d007      	beq.n	800353e <UART_Receive_IT+0x74>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <UART_Receive_IT+0x82>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	e008      	b.n	800355e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003558:	b2da      	uxtb	r2, r3
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29b      	uxth	r3, r3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4619      	mov	r1, r3
 8003576:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003578:	2b00      	cmp	r3, #0
 800357a:	d15a      	bne.n	8003632 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0220 	bic.w	r2, r2, #32
 800358a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800359a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d135      	bne.n	8003628 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	330c      	adds	r3, #12
 80035c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	e853 3f00 	ldrex	r3, [r3]
 80035d0:	613b      	str	r3, [r7, #16]
   return(result);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f023 0310 	bic.w	r3, r3, #16
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	330c      	adds	r3, #12
 80035e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e2:	623a      	str	r2, [r7, #32]
 80035e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e6:	69f9      	ldr	r1, [r7, #28]
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1e5      	bne.n	80035c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b10      	cmp	r3, #16
 8003602:	d10a      	bne.n	800361a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff fdbb 	bl	800319c <HAL_UARTEx_RxEventCallback>
 8003626:	e002      	b.n	800362e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7fd f8e1 	bl	80007f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e002      	b.n	8003638 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3730      	adds	r7, #48	; 0x30
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003644:	b0c0      	sub	sp, #256	; 0x100
 8003646:	af00      	add	r7, sp, #0
 8003648:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365c:	68d9      	ldr	r1, [r3, #12]
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	ea40 0301 	orr.w	r3, r0, r1
 8003668:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800366a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	431a      	orrs	r2, r3
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	431a      	orrs	r2, r3
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003698:	f021 010c 	bic.w	r1, r1, #12
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036a6:	430b      	orrs	r3, r1
 80036a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ba:	6999      	ldr	r1, [r3, #24]
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	ea40 0301 	orr.w	r3, r0, r1
 80036c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b8f      	ldr	r3, [pc, #572]	; (800390c <UART_SetConfig+0x2cc>)
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d005      	beq.n	80036e0 <UART_SetConfig+0xa0>
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4b8d      	ldr	r3, [pc, #564]	; (8003910 <UART_SetConfig+0x2d0>)
 80036dc:	429a      	cmp	r2, r3
 80036de:	d104      	bne.n	80036ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036e0:	f7fe fd50 	bl	8002184 <HAL_RCC_GetPCLK2Freq>
 80036e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036e8:	e003      	b.n	80036f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ea:	f7fe fd37 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 80036ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fc:	f040 810c 	bne.w	8003918 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003704:	2200      	movs	r2, #0
 8003706:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800370a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800370e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003712:	4622      	mov	r2, r4
 8003714:	462b      	mov	r3, r5
 8003716:	1891      	adds	r1, r2, r2
 8003718:	65b9      	str	r1, [r7, #88]	; 0x58
 800371a:	415b      	adcs	r3, r3
 800371c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800371e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003722:	4621      	mov	r1, r4
 8003724:	eb12 0801 	adds.w	r8, r2, r1
 8003728:	4629      	mov	r1, r5
 800372a:	eb43 0901 	adc.w	r9, r3, r1
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800373a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800373e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003742:	4690      	mov	r8, r2
 8003744:	4699      	mov	r9, r3
 8003746:	4623      	mov	r3, r4
 8003748:	eb18 0303 	adds.w	r3, r8, r3
 800374c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003750:	462b      	mov	r3, r5
 8003752:	eb49 0303 	adc.w	r3, r9, r3
 8003756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800375a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003766:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800376a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800376e:	460b      	mov	r3, r1
 8003770:	18db      	adds	r3, r3, r3
 8003772:	653b      	str	r3, [r7, #80]	; 0x50
 8003774:	4613      	mov	r3, r2
 8003776:	eb42 0303 	adc.w	r3, r2, r3
 800377a:	657b      	str	r3, [r7, #84]	; 0x54
 800377c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003780:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003784:	f7fc fd26 	bl	80001d4 <__aeabi_uldivmod>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4b61      	ldr	r3, [pc, #388]	; (8003914 <UART_SetConfig+0x2d4>)
 800378e:	fba3 2302 	umull	r2, r3, r3, r2
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	011c      	lsls	r4, r3, #4
 8003796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800379a:	2200      	movs	r2, #0
 800379c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037a8:	4642      	mov	r2, r8
 80037aa:	464b      	mov	r3, r9
 80037ac:	1891      	adds	r1, r2, r2
 80037ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80037b0:	415b      	adcs	r3, r3
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037b8:	4641      	mov	r1, r8
 80037ba:	eb12 0a01 	adds.w	sl, r2, r1
 80037be:	4649      	mov	r1, r9
 80037c0:	eb43 0b01 	adc.w	fp, r3, r1
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037d8:	4692      	mov	sl, r2
 80037da:	469b      	mov	fp, r3
 80037dc:	4643      	mov	r3, r8
 80037de:	eb1a 0303 	adds.w	r3, sl, r3
 80037e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037e6:	464b      	mov	r3, r9
 80037e8:	eb4b 0303 	adc.w	r3, fp, r3
 80037ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003800:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003804:	460b      	mov	r3, r1
 8003806:	18db      	adds	r3, r3, r3
 8003808:	643b      	str	r3, [r7, #64]	; 0x40
 800380a:	4613      	mov	r3, r2
 800380c:	eb42 0303 	adc.w	r3, r2, r3
 8003810:	647b      	str	r3, [r7, #68]	; 0x44
 8003812:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003816:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800381a:	f7fc fcdb 	bl	80001d4 <__aeabi_uldivmod>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4611      	mov	r1, r2
 8003824:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <UART_SetConfig+0x2d4>)
 8003826:	fba3 2301 	umull	r2, r3, r3, r1
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2264      	movs	r2, #100	; 0x64
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	1acb      	subs	r3, r1, r3
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800383a:	4b36      	ldr	r3, [pc, #216]	; (8003914 <UART_SetConfig+0x2d4>)
 800383c:	fba3 2302 	umull	r2, r3, r3, r2
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003848:	441c      	add	r4, r3
 800384a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800384e:	2200      	movs	r2, #0
 8003850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003854:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003858:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800385c:	4642      	mov	r2, r8
 800385e:	464b      	mov	r3, r9
 8003860:	1891      	adds	r1, r2, r2
 8003862:	63b9      	str	r1, [r7, #56]	; 0x38
 8003864:	415b      	adcs	r3, r3
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003868:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800386c:	4641      	mov	r1, r8
 800386e:	1851      	adds	r1, r2, r1
 8003870:	6339      	str	r1, [r7, #48]	; 0x30
 8003872:	4649      	mov	r1, r9
 8003874:	414b      	adcs	r3, r1
 8003876:	637b      	str	r3, [r7, #52]	; 0x34
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003884:	4659      	mov	r1, fp
 8003886:	00cb      	lsls	r3, r1, #3
 8003888:	4651      	mov	r1, sl
 800388a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800388e:	4651      	mov	r1, sl
 8003890:	00ca      	lsls	r2, r1, #3
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	4603      	mov	r3, r0
 8003898:	4642      	mov	r2, r8
 800389a:	189b      	adds	r3, r3, r2
 800389c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038a0:	464b      	mov	r3, r9
 80038a2:	460a      	mov	r2, r1
 80038a4:	eb42 0303 	adc.w	r3, r2, r3
 80038a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038c0:	460b      	mov	r3, r1
 80038c2:	18db      	adds	r3, r3, r3
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c6:	4613      	mov	r3, r2
 80038c8:	eb42 0303 	adc.w	r3, r2, r3
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038d6:	f7fc fc7d 	bl	80001d4 <__aeabi_uldivmod>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <UART_SetConfig+0x2d4>)
 80038e0:	fba3 1302 	umull	r1, r3, r3, r2
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	2164      	movs	r1, #100	; 0x64
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	3332      	adds	r3, #50	; 0x32
 80038f2:	4a08      	ldr	r2, [pc, #32]	; (8003914 <UART_SetConfig+0x2d4>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	f003 0207 	and.w	r2, r3, #7
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4422      	add	r2, r4
 8003906:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003908:	e105      	b.n	8003b16 <UART_SetConfig+0x4d6>
 800390a:	bf00      	nop
 800390c:	40011000 	.word	0x40011000
 8003910:	40011400 	.word	0x40011400
 8003914:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391c:	2200      	movs	r2, #0
 800391e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003922:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003926:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800392a:	4642      	mov	r2, r8
 800392c:	464b      	mov	r3, r9
 800392e:	1891      	adds	r1, r2, r2
 8003930:	6239      	str	r1, [r7, #32]
 8003932:	415b      	adcs	r3, r3
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
 8003936:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800393a:	4641      	mov	r1, r8
 800393c:	1854      	adds	r4, r2, r1
 800393e:	4649      	mov	r1, r9
 8003940:	eb43 0501 	adc.w	r5, r3, r1
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	00eb      	lsls	r3, r5, #3
 800394e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003952:	00e2      	lsls	r2, r4, #3
 8003954:	4614      	mov	r4, r2
 8003956:	461d      	mov	r5, r3
 8003958:	4643      	mov	r3, r8
 800395a:	18e3      	adds	r3, r4, r3
 800395c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003960:	464b      	mov	r3, r9
 8003962:	eb45 0303 	adc.w	r3, r5, r3
 8003966:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003976:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003986:	4629      	mov	r1, r5
 8003988:	008b      	lsls	r3, r1, #2
 800398a:	4621      	mov	r1, r4
 800398c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003990:	4621      	mov	r1, r4
 8003992:	008a      	lsls	r2, r1, #2
 8003994:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003998:	f7fc fc1c 	bl	80001d4 <__aeabi_uldivmod>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4b60      	ldr	r3, [pc, #384]	; (8003b24 <UART_SetConfig+0x4e4>)
 80039a2:	fba3 2302 	umull	r2, r3, r3, r2
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	011c      	lsls	r4, r3, #4
 80039aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039bc:	4642      	mov	r2, r8
 80039be:	464b      	mov	r3, r9
 80039c0:	1891      	adds	r1, r2, r2
 80039c2:	61b9      	str	r1, [r7, #24]
 80039c4:	415b      	adcs	r3, r3
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039cc:	4641      	mov	r1, r8
 80039ce:	1851      	adds	r1, r2, r1
 80039d0:	6139      	str	r1, [r7, #16]
 80039d2:	4649      	mov	r1, r9
 80039d4:	414b      	adcs	r3, r1
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039e4:	4659      	mov	r1, fp
 80039e6:	00cb      	lsls	r3, r1, #3
 80039e8:	4651      	mov	r1, sl
 80039ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ee:	4651      	mov	r1, sl
 80039f0:	00ca      	lsls	r2, r1, #3
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	4603      	mov	r3, r0
 80039f8:	4642      	mov	r2, r8
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a00:	464b      	mov	r3, r9
 8003a02:	460a      	mov	r2, r1
 8003a04:	eb42 0303 	adc.w	r3, r2, r3
 8003a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a24:	4649      	mov	r1, r9
 8003a26:	008b      	lsls	r3, r1, #2
 8003a28:	4641      	mov	r1, r8
 8003a2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a2e:	4641      	mov	r1, r8
 8003a30:	008a      	lsls	r2, r1, #2
 8003a32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a36:	f7fc fbcd 	bl	80001d4 <__aeabi_uldivmod>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4b39      	ldr	r3, [pc, #228]	; (8003b24 <UART_SetConfig+0x4e4>)
 8003a40:	fba3 1302 	umull	r1, r3, r3, r2
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	2164      	movs	r1, #100	; 0x64
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	3332      	adds	r3, #50	; 0x32
 8003a52:	4a34      	ldr	r2, [pc, #208]	; (8003b24 <UART_SetConfig+0x4e4>)
 8003a54:	fba2 2303 	umull	r2, r3, r2, r3
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a5e:	441c      	add	r4, r3
 8003a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a64:	2200      	movs	r2, #0
 8003a66:	673b      	str	r3, [r7, #112]	; 0x70
 8003a68:	677a      	str	r2, [r7, #116]	; 0x74
 8003a6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a6e:	4642      	mov	r2, r8
 8003a70:	464b      	mov	r3, r9
 8003a72:	1891      	adds	r1, r2, r2
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	415b      	adcs	r3, r3
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a7e:	4641      	mov	r1, r8
 8003a80:	1851      	adds	r1, r2, r1
 8003a82:	6039      	str	r1, [r7, #0]
 8003a84:	4649      	mov	r1, r9
 8003a86:	414b      	adcs	r3, r1
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a96:	4659      	mov	r1, fp
 8003a98:	00cb      	lsls	r3, r1, #3
 8003a9a:	4651      	mov	r1, sl
 8003a9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aa0:	4651      	mov	r1, sl
 8003aa2:	00ca      	lsls	r2, r1, #3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4642      	mov	r2, r8
 8003aac:	189b      	adds	r3, r3, r2
 8003aae:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ab0:	464b      	mov	r3, r9
 8003ab2:	460a      	mov	r2, r1
 8003ab4:	eb42 0303 	adc.w	r3, r2, r3
 8003ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ac4:	667a      	str	r2, [r7, #100]	; 0x64
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	008b      	lsls	r3, r1, #2
 8003ad6:	4641      	mov	r1, r8
 8003ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003adc:	4641      	mov	r1, r8
 8003ade:	008a      	lsls	r2, r1, #2
 8003ae0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ae4:	f7fc fb76 	bl	80001d4 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <UART_SetConfig+0x4e4>)
 8003aee:	fba3 1302 	umull	r1, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2164      	movs	r1, #100	; 0x64
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	3332      	adds	r3, #50	; 0x32
 8003b00:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <UART_SetConfig+0x4e4>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	f003 020f 	and.w	r2, r3, #15
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4422      	add	r2, r4
 8003b14:	609a      	str	r2, [r3, #8]
}
 8003b16:	bf00      	nop
 8003b18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b22:	bf00      	nop
 8003b24:	51eb851f 	.word	0x51eb851f

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	4d0d      	ldr	r5, [pc, #52]	; (8003b60 <__libc_init_array+0x38>)
 8003b2c:	4c0d      	ldr	r4, [pc, #52]	; (8003b64 <__libc_init_array+0x3c>)
 8003b2e:	1b64      	subs	r4, r4, r5
 8003b30:	10a4      	asrs	r4, r4, #2
 8003b32:	2600      	movs	r6, #0
 8003b34:	42a6      	cmp	r6, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	4d0b      	ldr	r5, [pc, #44]	; (8003b68 <__libc_init_array+0x40>)
 8003b3a:	4c0c      	ldr	r4, [pc, #48]	; (8003b6c <__libc_init_array+0x44>)
 8003b3c:	f000 f820 	bl	8003b80 <_init>
 8003b40:	1b64      	subs	r4, r4, r5
 8003b42:	10a4      	asrs	r4, r4, #2
 8003b44:	2600      	movs	r6, #0
 8003b46:	42a6      	cmp	r6, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b50:	4798      	blx	r3
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5a:	4798      	blx	r3
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	08003bcc 	.word	0x08003bcc
 8003b64:	08003bcc 	.word	0x08003bcc
 8003b68:	08003bcc 	.word	0x08003bcc
 8003b6c:	08003bd0 	.word	0x08003bd0

08003b70 <memset>:
 8003b70:	4402      	add	r2, r0
 8003b72:	4603      	mov	r3, r0
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d100      	bne.n	8003b7a <memset+0xa>
 8003b78:	4770      	bx	lr
 8003b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7e:	e7f9      	b.n	8003b74 <memset+0x4>

08003b80 <_init>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

08003b8c <_fini>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr
